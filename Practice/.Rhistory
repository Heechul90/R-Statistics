mat4 <- rbind(mat4,seq(10:12)); mat4
# 새로운 행과 열을 추가
mat4 <- rbind(mat4,c(10,11,12)); mat4
mat4 <- matrix(seq(1:9), nrow=3, byrow=T); mat4
mat4 <- rbind(mat4,c(10,11,12)); mat4
mat4 <- cbind(mat4,c(13,14,15,16)); mat4
mat5 <- matrix(c('a','b','c','d'), nrow=2, byrow=T)
mat5 <- matrix(c('a','b','c','d'), nrow=2, byrow=T); mat5
colnames(mat5) <- c('First', 'Second', 'Third')
mat5
mat5 <- cbind(mat5, c('e', 'f'))
mat5
colnames(mat5) <- c('First', 'Second', 'Third')
mat5
# Maxtrix형 연습문제
seasons <- mat(c('봄','여름','가을','겨울')); seasons
# Maxtrix형 연습문제
seasons <- matrix(c('봄','여름','가을','겨울')); seasons
# Maxtrix형 연습문제
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2); seasons
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2, byrow=T); seasons
seasons(2,)
seasons[2,]
seasons[,1]
seasons[2,]
seasons[,2]
seasons_2 <- rbind(seasons,c('초봄', '초가을')); seasons_2
seasons_3 <- cbind(seasons_2, c('초여름', '초겨울', '한겨울')); seasons_3
array1 <- array(c(1:12), dim(4,3)); array1
array1 <- array(c(1:12), dim=c(4,3)); array1
array1 <- array(c(1:12), dim=c(4,3), byrow=T); array1
array2 <- array(c(1:12), dim(2,2,3))
array2 <- array(c(1:12), dim(2,2,3)); array2
array2 <- array(c(1:12), dim=c(2,2,3)); array2
array2
array2[1,1,2]
list1 <- list(name='홍길동, address='천국', tel='010-8706-4712', age=300)
list1
list1 <- list(name='홍길동', address='천국', tel='010-8706-4712', age=300)
list1
list1$name
list1$age
list1$address
list[1:2]
list1[1:2]
list1$birthday ,- '1719-05-30'
list1$birthday <- '1719-05-30'
list
list1
list1$birthday <- NULL
list1
rm(list=ls())
no <- c(1,2,3,4)
name <- c('Apple', 'Peach', 'Banana', 'Grape')
price <- c('500', '200', '100', '50')
No <- c(1,2,3,4)
Name <- c('Apple', 'Peach', 'Banana', 'Grape')
Price <- c('500', '200', '100', '50')
Qty <- c(5,2,,4,7)
rm(name)
rm(no, price)
Qty <- c(5,2,,4,7)
Qty <- c(5,2,,4,7)
Qty <- c(5,2,4,7)
sales <- date.frame(NO=No, NAME=Name, PRICE=Price, QTY=Qty)
sales <- date.frame(NO=No, NAME=Name, PRICE=Price, QTY=Qty); sales
sales <- data.frame(NO=No, NAME=Name, PRICE=Price, QTY=Qty); sales
sales
4, 'Grape',  50, 7)
sales2 <- matrix(c(1, 'Apple',  500, 5,
2, 'Peach',  200, 2,
3, 'Banana', 100, 4,
4, 'Grape',  50, 7))
sales2
sales2 <- matrix(c(1, 'Apple',  500, 5,
2, 'Peach',  200, 2,
3, 'Banana', 100, 4,
4, 'Grape',  50, 7), nrow=4, byrow=T)
sales2
df1 <- data.frame(sales2)
df1
names(df1) <- c('NO', 'NAME', 'PRICE', 'QTY')
df1
sales
sales$NAME
sales[1,3]
sales[1,3]
sales[,3]
sales$PRICE
sales[c(1,2),]
sales[,c(1,2)]
sales[,c(1:3)]
subset(sales , QTY<5)
subset(sales , QTY<5)
subset(sales, PRICE==500)
subset(sales, PRICE!=500)
subset(sales, NAME=='Grape')
no <- c(1,2,3,)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(1,2,3)
df1
no <- c(1,2,3)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(10,20,30)
name <- c('train', 'car', 'airplane')
price <- c(1000,2000,3000)
df2 <- data.frame(NO=no, NAME=name, PRICE=price)
df2
df3 <- cbind(df1, df2)
df3
df3$NAME
df3[,5]
df5<- rbind(df1, df2)
df5
df1 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df1
df5 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df5
df6 <- data.frame(name=c('apple', 'cherry', 'berry'), qty=c(10,20,30))
df6
merge(df5,df6)
merge(df5,df6, all=T)
cbind(df5,df6)
rbind(df5,df6)
cbind(df6,df5)
df1
new <- data.frame(name= 'mango', price=400)
df1<- rbind(df1,new)
df1
df1 <- rbind(df1, data.frame(name= 'berry', price= 500))
df1
df1 <- cbind(df1, data.frame(qty=c(10,20,30,40,50)))
df1
no <- c(1,2,3,4,5)
no <- c(1,2,3,4,5)
name <- c('서진수', '주시현', '최경우', '이동근', '윤정웅')
address <- c('서울', '대전', '포항', '경주', '경기')
tel <- c(1111, 2222, 3333, 4444, 5555)
hoby <- c('독서', '미술', '놀고먹기', '먹고놀기', '노는애감시하기')
member <- data.frame(NO=no, NAME=name, ADDRESS=address, TEL=tel, HOBY= hoby)
member
member2 <- subset(member, select = c(NO, NAME, TEL))
member2
member3 <- subset(member, select = -TEL)
member3
colnames(member3) <- c('번호', '이름', '주소', '취미')
member3
sales
ncol(sales)
nrow(sales)
names(sales)
rownames(sales)
sales[c(2,3,1,),]
sales[c(2,3,1,), ]
sales[c(2,3,1,4), ]
list.files()
rm(list=ls())
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2)
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2); seasons
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2, byrow=T)
seasons
seasons[,2]
seasons2 <- rbind(seasons, c('초봄', '초가을'))
seasons2
seasons3 <- cbind(seasons2, c('초여름', '초겨울', '한겨울'))
seasons3
no <- c(1,2,3,4)
name <- c('Apple', 'Peach', 'Banana', 'Grape')
Price <- c(500, 200, 100, 50)
rm(Price)
price <- c(500, 200, 100, 50)
qty <- c(5, 2, 4, 7)
sales <- data.frame(NO=no, NAME=name, PRICE=price, QTY=qty)
sales
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
no1 <- c(1,2,3,4)
name1 <- c('Apple', 'Peach', 'Banana', 'Grape')
price1 <- c(200, 100, 50)
qty1 <- c(5, 2, 4, 7)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
price1 <- c(500, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
sales1
price1 <- c(NULL, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
price1 <- c('NULL', 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
sales
sales$NO
sales$NAME
sales[1,4]
sales[,4]
sales[0,4]
sales(c(1,2),)
sales[c(1,2),]
sales[c(1:3),]
subset(sales, PRICE>150)
subset(sales, price>150)
subset(sales, price>150)
rm(list(ls))
rm(list=ls())
rm(list=ls())
scan <- scan('scan_1.txt')
scan <- scan('scan_1.txt')
rm(list=ls())
setwd('D:/Heechul/R_Statistics/Lecture/chapter07')
setwd('D:/Heechul/R_Statistics/Lecture/chapter07')
## 문제 02. 학생들의 평균성적은 55점.
##          0교시 수업 후 성적 58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39
##          0교시 수업을 시행한 후, 학생들의 성적은 올랐다고 할 수 있는가?
# H0 : 학생들의 mu = 55 or mu <= 55
# H1 : 학생들의 mu > 55
score <- c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)
mu <- 55
xbar <- mean(score)
xbar
sd <- sd(score)
sd
n <- length(score)
n
# 통계량
t <- (xbar-mu) / (sd/sqrt(n))
t
# 유의 수준(한쪽:오른쪽)
alpha <- 0.05
c.u <- 1 - qt(alpha, df=n-1)
c.u
# 유의 확률
p.value <- 1 - pt(t, df=n-1)
p.value
t.test(score, mu=mu, alternative = 'greater')
## 예제 7-1.
qf(0.05, df=25)
## 예제 7-1.
qf(0.05, df=17, df=25)
qf(0.05, df=17, df=25)
library(prob)
qf(0.05, df=17, df=25)
qf(0.05, df=16, df=24)
qf(0.05, df=17, df=25)
qf(0.05, 17, 25)
pf(0.05, 17, 25)
qf(0.975, df = 17, df = 25)
qf(0.975, df1 = 17, df2 = 25)
qf(0.025, df1 = 17, df2 = 25)
qf(0.975, df1 = 17, df2 = 25)
data <- read.table('http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt', header = F)
data
nrow(data)
ncol(data)
str(data)
head(data)
names <- c('time', 'gender', 'weight', 'minutes')
source('D:/Heechul/R_Statistics/Lecture/chapter07(여러 모집단의 평균 비교 검정)/section01.R', encoding = 'UTF-8', echo=TRUE)
head(data)
names(data) <- c('time', 'gender', 'weight', 'minutes')
head(data)
names(data)[1] <- 'time.24Hrs'
head(data)
row.names(data)
data
str(data[data$gender==2,])
chapter7 <- data[,c(2,3)]
chapter
chapter7
write.table(chapter7, './data/chapter7.txt', row.names=F)
setwd('D:/Heechul/R_Statistics/Lecture/chapter07')
setwd('D:/Heechul/R_Statistics/Lecture/chapter07')
setwd('D:/Heechul/R_Statistics/Lecture/chapter07(여러 모집단의 평균 비교 검정)')
write.table(chapter7, 'chapter7.txt', row.names=F)
write.table(chapter7, './data/chapter7.txt', row.names=F)
write.table(chapter7, './data/chapter7.txt', row.names=F)
ad <- read.csv('data/age.data.csv', header = T)
ad
ad$score <- ifelse(ad$score == 99, NA, ad$score)
summary(ad)
ad2 <- read.csv('data/age.data.csv', header = T, na.strings = c('99'))
summary(ad2)
ad$score <- ifelse(ad$score == 99, NA, ad$score)
summary(ad)
ad <- read.csv('data/age.data.csv', header = T)
ad
summary(ad)
ad$score <- ifelse(ad$score == 99, NA, ad$score)
summary(ad)
ad2 <- read.csv('data/age.data.csv', header = T, na.strings = c('99'))
summary(ad2)
ad$scale <- factor(ad$scale)
ad$sex <- factor(ad$sex)
str(ad)
install.packages('doBy')
library(doBy)
data <- read.txt('data/chapter7.txt', header = T)
data <- read.table('data/chapter7.txt', header = T)
data
var.test(data$weight ~ data$gender)
# 모평균의 차이 검정
# 영가설 : 여 몸무게와 남 몸무게의 평균은 같다. 여평균 - 남평균 = 0
# 대안가설 : 여 몸무게는 남 몸무게 보다 작다. 여평균 - 남평균 < 0
t.test(data$weight ~ data$gender, mu=0, alternative='less', var.equal=T)
mtcar
mtcars
mpg
mtcars$mpg
mtcars
var.test(mtcars$mpg ~ mtcars$am)
# 분산의 동일성 검정
# 영가설 : 오토/수동 집단의 분산은 서로 동일하다.
# 대안가설 : 오토/수동 집단의 분산은 서로 다르다.
var.test(mtcars$mpg ~ mtcars$am)
# 2. 모평균의 차이 검정
# 영가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
str(mtcars$am)
mtcars$am
mtcars
setwd('D:/Heechul/R_Statistics/Practice')
# 2. 모평균의 차이 검정
# 영가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
head(mtcars)
library(dplyr)
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_am = mean(am)) %>%
summarise(sd_am = sd(am))
ex01
ex01 <- mtcars %>%
group_by(am) %>%
summarise(mean_am = mean(am)) %>%
summarise(sd_am = sd(am))
ex01
head(mtcars)
ex01 <- mtcars %>%
group_by(am) %>%
summarise(mean_am = mean(mpg)) %>%
summarise(sd_am = sd(mpg))
ex01
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg)) %>%
summarise(sd_mpg = sd(mpg))
ex01
head(mtcars)
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg)) %>%
summarise(sd_mpg = sd(mpg))
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg))
ex01
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg)) %>%
summarise(sd_mpg = sd(mpg))
str(mtcars)
ex01 <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mean_mpg = mean(mpg))
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
ex01
mpg_mean
mpg_sd <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_sd = sd(mpg))
mpg_sd
# 2. 모평균의 차이 검정
# 영가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
mpg_n <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_n = n(mpg))
mpg_n
mpg_n <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_n = n(mpg))
mpg_n <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_n = n())
mpg_n
# 2. 모평균의 차이 검정
# 영가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:오토의 mpg의 평균과 am:수동의 mpg의 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
## 문제 02. MASS 패키지에 내장된 Cars93 데이터프레임에 대해서 생산국(Origin)이
#           USA vs. non-USA 2개의 group 에 대해서 차 가격(Price)의 평균이
#           차이가 있는지를검정해보시오.
Cars93
## 문제 02. MASS 패키지에 내장된 Cars93 데이터프레임에 대해서 생산국(Origin)이
#           USA vs. non-USA 2개의 group 에 대해서 차 가격(Price)의 평균이
#           차이가 있는지를검정해보시오.
install.packages('MASS')
library(MASS)
Cars93
head(Cars93)
str(Cars93)
price_n <- Cars93 %>%
select(Origin, Price) %>%
group_by(Origin) %>%
summarise(price_n = n())
price_n <- Cars93 %>%
select(Origin, Price) %>%
group_by(Origin) %>%
summarise(price_n = n())
price_n <- Cars93 %>%
select(Origin , Price) %>%
group_by(Origin) %>%
summarise(price_n = n())
price_n <- Cars93 %>%
select(Origin, Price) %>%
group_by(Origin) %>%
summarise(price_n = n())
head(Cars93)
price_n <- Cars93 %>%
select(Origin, Price) %>%
group_by(Origin)
price_n <- Cars93 %>%
select(Origin, Price)
price_n <- Cars93 %>%
select(Origin, Price)
library(dplyr)
price_n <- Cars93 %>%
select(Origin, Price)
## 문제 02. MASS 패키지에 내장된 Cars93 데이터프레임에 대해서 생산국(Origin)이
#           USA vs. non-USA 2개의 group 에 대해서 차 가격(Price)의 평균이
#           차이가 있는지를검정해보시오.
Cars93
str(Cars93)
price_n <- Cars93 %>%
select(Price, Origin)
price_n <- Cars93 %>%
select(price, origin)
mpg_n <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_n = n())
library(prob)
library(dplyr)
library(MASS)
head(mtcars)
str(mtcars)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
price_n <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_n = n())
library(prob)
library(dplyr)
library(MASS)
head(mtcars)
str(mtcars)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
# 1. 분산의 동일성 검정
# 영가설 : 오토/수동 집단의 분산은 서로 동일하다.
# 대안가설 : 오토/수동 집단의 분산은 서로 다르다.
var.test(mtcars$mpg ~ mtcars$am)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
mpg_mean
library(dplyr)
library(prob)
library(MASS)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
head(mtcars)
str(mtcars)
# 1. 분산의 동일성 검정
# 영가설 : 오토/수동 집단의 분산은 서로 동일하다.
# 대안가설 : 오토/수동 집단의 분산은 서로 다르다.
var.test(mtcars$mpg ~ mtcars$am)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
mpg_mean
