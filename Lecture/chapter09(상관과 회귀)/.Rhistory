sales2
sales2 <- matrix(c(1, 'Apple',  500, 5,
2, 'Peach',  200, 2,
3, 'Banana', 100, 4,
4, 'Grape',  50, 7), nrow=4, byrow=T)
sales2
df1 <- data.frame(sales2)
df1
names(df1) <- c('NO', 'NAME', 'PRICE', 'QTY')
df1
sales
sales$NAME
sales[1,3]
sales[1,3]
sales[,3]
sales$PRICE
sales[c(1,2),]
sales[,c(1,2)]
sales[,c(1:3)]
subset(sales , QTY<5)
subset(sales , QTY<5)
subset(sales, PRICE==500)
subset(sales, PRICE!=500)
subset(sales, NAME=='Grape')
no <- c(1,2,3,)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(1,2,3)
df1
no <- c(1,2,3)
name <- c('apple', 'banana', 'peach')
price <- c(100,200,300)
df1 <- data.frame(NO=no, NAME=name, PRICE=price)
df1
no <- c(10,20,30)
name <- c('train', 'car', 'airplane')
price <- c(1000,2000,3000)
df2 <- data.frame(NO=no, NAME=name, PRICE=price)
df2
df3 <- cbind(df1, df2)
df3
df3$NAME
df3[,5]
df5<- rbind(df1, df2)
df5
df1 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df1
df5 <- data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df5
df6 <- data.frame(name=c('apple', 'cherry', 'berry'), qty=c(10,20,30))
df6
merge(df5,df6)
merge(df5,df6, all=T)
cbind(df5,df6)
rbind(df5,df6)
cbind(df6,df5)
df1
new <- data.frame(name= 'mango', price=400)
df1<- rbind(df1,new)
df1
df1 <- rbind(df1, data.frame(name= 'berry', price= 500))
df1
df1 <- cbind(df1, data.frame(qty=c(10,20,30,40,50)))
df1
no <- c(1,2,3,4,5)
no <- c(1,2,3,4,5)
name <- c('서진수', '주시현', '최경우', '이동근', '윤정웅')
address <- c('서울', '대전', '포항', '경주', '경기')
tel <- c(1111, 2222, 3333, 4444, 5555)
hoby <- c('독서', '미술', '놀고먹기', '먹고놀기', '노는애감시하기')
member <- data.frame(NO=no, NAME=name, ADDRESS=address, TEL=tel, HOBY= hoby)
member
member2 <- subset(member, select = c(NO, NAME, TEL))
member2
member3 <- subset(member, select = -TEL)
member3
colnames(member3) <- c('번호', '이름', '주소', '취미')
member3
sales
ncol(sales)
nrow(sales)
names(sales)
rownames(sales)
sales[c(2,3,1,),]
sales[c(2,3,1,), ]
sales[c(2,3,1,4), ]
list.files()
rm(list=ls())
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2)
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2); seasons
seasons <- matrix(c('봄', '여름', '가을', '겨울'), nrow=2, byrow=T)
seasons
seasons[,2]
seasons2 <- rbind(seasons, c('초봄', '초가을'))
seasons2
seasons3 <- cbind(seasons2, c('초여름', '초겨울', '한겨울'))
seasons3
no <- c(1,2,3,4)
name <- c('Apple', 'Peach', 'Banana', 'Grape')
Price <- c(500, 200, 100, 50)
rm(Price)
price <- c(500, 200, 100, 50)
qty <- c(5, 2, 4, 7)
sales <- data.frame(NO=no, NAME=name, PRICE=price, QTY=qty)
sales
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
no1 <- c(1,2,3,4)
name1 <- c('Apple', 'Peach', 'Banana', 'Grape')
price1 <- c(200, 100, 50)
qty1 <- c(5, 2, 4, 7)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
price1 <- c(500, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1)
sales1
price1 <- c(NULL, 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
price1 <- c('NULL', 200, 100, 50)
sales1 <- data.frame(NO1=no1, NAME1=name1, PRICE1=price1, QTY1=qty1); sales1
sales
sales$NO
sales$NAME
sales[1,4]
sales[,4]
sales[0,4]
sales(c(1,2),)
sales[c(1,2),]
sales[c(1:3),]
subset(sales, PRICE>150)
subset(sales, price>150)
subset(sales, price>150)
rm(list(ls))
rm(list=ls())
rm(list=ls())
scan <- scan('scan_1.txt')
scan <- scan('scan_1.txt')
rm(list=ls())
setwd('D:/Heechul/R_Statistics/Lecture/chapter09(상관과 회귀)')
## 예제 9-1. 아버지와 아들 키의 공분산과 상관계수
hf <- read.table('http://www.randomservices.org/rangom/data/Galton.txt',
header = T, stringsAsFactors = FALSE)
hf
## 예제 9-1. 아버지와 아들 키의 공분산과 상관계수
hf <- read.table('http://www.randomservices.org/rangom/data/Galton.txt',
header = T, stringsAsFactors = FALSE)
## 예제 9-1. 아버지와 아들 키의 공분산과 상관계수
hf <- read.table('http://www.randomservices.org/random/data/Galton.txt',
header = T, stringsAsFactors = FALSE)
hf
str(hf)
hf$Gender <- factor(hf$Gender, levels = c('M', 'F'))
hf.son <- subset(hf, Gender == 'M')
hf.son <- hf.son[c('Father', 'Height')]
str(hf.son)
f.mean <- mean(hf.son$Father)
f.mean
s.mean <- mean(hf.son$Height)
s.mean
cov.num <- sum(hf.son$Father-f.mean) * (hf.son$Height-s.mean)
cov.num
cov.num <- sum((hf.son$Father-f.mean) * (hf.son$Height-s.mean))
cov.num
cov.xy <- cov.num / (nrow(hf.son) - 1)
cov.xy
cov(hf.son$Father, hf.son$Height)
r.xy <- cov.xy / (sd(hf.son$Father) * sd(hf.son$Height))
r.xy
cor(hf.son$Father, hf.son$Height)
## 예제 9-2. 아버지와 아들 키 자료로부터 회귀계수 추정
mean.x <- mean(hf.son$Father)
mean.x
mean.y <- mean(hf.son$Height)
mean.y
sxy <- sum((hf.son$Father - mean.x) * (hf.son$Height))
sxy
sxx <- sum((hf.son$Father - mean.x)^2)
sxx
b1 <- sxy / sxx
b1
b0 <- mean.y - b1 * mean.x
b0
# R로 회귀계수(lm()함수)
lm(Height ~ Father, data=hf.son)
plot(hf.son$Height, hf.son$Father)
plot(hf$Height, hf$Father)
# R로 회귀계수(lm()함수)
out <- lm(Height ~ Father, data=hf.son)
summary(out)
## 예제 9-3. 회귀모형의 유의성 검정
anova(out)
## 예제 9-4. 회귀계수의 유의성 검정
summary(out)
plot(out)
par(mfrow = c(2,2))
plot(out)
## 예제 9-5. R 내장함수를 이용한 정규성 검정
shapiro.test(residuals(out2))
## 예제 9-5. R 내장함수를 이용한 정규성 검정
women
# 신장에 따른 몸무게
plot(weight ~ height, data = women)
fit <- lm(weight ~ height, data=women)
anova(fit)
summary(fit)
abline(fit, col='red', lwd=2)
# 신장에 따른 몸무게
par(mfrow= c(1,1))
plot(weight ~ height, data = women)
fit <- lm(weight ~ height, data=women)
abline(fit, col='red', lwd=2)
summary(fit)
col.test(women$weight, women$height)
cor.test(women$weight, women$height)
par(mfrow= c(2,2))
plot(fit)
par(mfrow = c(1,1))
fit2 <- lm(weight ~ height + I(height^2), data = women)
plot(fit2)
par(mfrow = c(1,1))
plot(fit2)
par(mfrow = c(1,1))
par(mfrow = c(1,1))
plot(fit2)
par(mfrow = c(1,1))
par(mfrow = c(1,1))
par(mfrow = c(1,1))
par(mfrow = c(1,1))
plot(fit2)
plot(weight~height, data = women)
lines(women$weight, women$height)
lines(women$weight, women$height, col = 'green', lwd=2)
plot(weight~height, data = women)
lines(women$weight, women$height, col = 'green', lwd=2)
lines(women$weight, women$height, fitted(fit2), col = 'green', lwd=2)
lines(women$height, fitted(fit2), col = 'green', lwd=2)
summary(fit2)
par(mfrow = c(2,2))
plot(fit2)
fit3 <- lm(weight ~ height + I(height^2) + I(height^3), data = women)
par(mfrow = c(1,1))
plot(weight~height , data = women)
lines(women$height, fitted(fit3), col = 'orange', lwd = 2)
summary(fit3)
par(mfrow = c(2,2))
plot(fit3)
AIC(fit2)
AIC(fit3)
state.x77
head(state.x77)
states <- ad.data.frame(state.x77[,c('Murder', 'Population',
'Illiteracy', 'Income', 'Frost')])
states <- as.data.frame(state.x77[,c('Murder', 'Population',
'Illiteracy', 'Income', 'Frost')])
states
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
par(mfrow=c(1,1))
summary(fit)
par(mfrow = c(2,2))
plot(fit)
fit1 <- lm(Murder ~ . , data = states)
plot(fit1)
summary(fit1)
# Income, Frost는 별 영향 없을까?
fit2 <- lm(Murder ~ Population + Illiteracy, data = states)
summary(fit2)
# AIC(Akaike Information Criterion)
AIC(fit1, fit2)
# AIC(Akaike Information Criterion)
AIC(fit1, fit2)
# Backward stepwise regression, Forward stepwise regression
step(fit1, direction = 'backward')
fit3 <- lm(Murder ~ 1, data = states)
step(fit3, direction = 'forward',
scope = ~Population + Illiteracy + Income + Frost)
step(fit3, direction = 'forward', scope = list(upper = fit1, lower = fit3))
install.packages('leaps')
library(leaps)
# Backward stepwise regression, Forward stepwise regression
# Backward 모든변수부터
# Forward 상수항부터
step(fit1, direction = 'backward')
fit3 <- lm(Murder ~ 1, data = states)
step(fit3, direction = 'forward',
scope = ~Population + Illiteracy + Income + Frost)
step(fit3, direction = 'forward', scope = list(upper = fit1, lower = fit3))
subsets <- regsubsets(Murder ~., data=states,
method = 'seqrep', nbest = 4)
plot(subsets)
par(mfrow = c(1,1))
plot(subsets)
subsets <- regsubsets(Murder~., data = states,
method = 'exhaustive', nbest = 1)
plot(subsets)
data <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
data
source('~/.active-rstudio-document', echo=TRUE)
str(data)
head(data)
data$rank <- as.factor(data$rank)
str(data)
train <- data[1:200,]
train
test <- data[201:400,]
test
model <- glm(admit ~ gre + gpa + rank + data = data,
family = 'binomial')
model <- glm(admit ~ gre + gpa + rank, data = data,
family = 'binomial')
model
summary(model)
# 그림 9-1
set.seed(9)
rvnorm <- function(r) {
x <- rnorm(50, 0, 1)
y <- rnorm(50, r*x, sqrt(1-r^2))
return(cbind(x,y))
}
par(mfrow=c(1, 3), mar=c(2, 2, 2, 1), oma=c(0,0,0,0))
r1 <- rvnorm(0.8)
plot(r1, main="r=0.8")
abline(lm(r1[,2] ~ r1[,1]), col="red")
plot(rvnorm(0), main="r=0")
abline(h=0, col="red")
r3 <- rvnorm(-0.8)
plot(r3, main="r=-0.8")
abline(lm(r3[,2] ~ r3[,1]), col="red")
par(mfrow=c(1, 1))
setwd('D:/Heechul/R_Statistics/Lecture/chapter09(상관과 회귀)')
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
mpg
library(dplyr)
mpg
library(ggplot2)
mpg
mpg$hwy[mpg$class=="subcompact"]
shapiro.test(mpg$hwy[mpg$class=="subcompact"])
qqnorm(mpg$hwy[mpg$class=="subcompact"]) ; qqline(mpg$hwy[mpg$class=="subcompact"])
# 필요 패키지
library(prob)
library(dplyr)
head(mtcars)
str(mtcars)
mpg_mean <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_mean = mean(mpg))
mpg_mean
mpg_sd <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_sd = sd(mpg))
mpg_sd
mpg_n <- mtcars %>%
select(mpg, am) %>%
group_by(am) %>%
summarise(mpg_n = n())
mpg_n
# 1. 분산의 동일성 검정
# 영가설 : 오토/수동 집단의 분산은 서로 동일하다.
# 대안가설 : 오토/수동 집단의 분산은 서로 다르다.
str(mtcars)
var.test(mtcars$mpg ~ mtcars$am)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='two-sided', var.equal=T)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='two-sided', var.equal=T)
less
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
var.test(mtcars$mpg ~ mtcars$am)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='less', var.equal=T)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, var.equal=T)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, var.equal=T)
head(Cars93)
str(Cars93)
price_n <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_n = n())
price_n
price_mean <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_mean = mean(Price))
price_mean
price_sd <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_sd = sd(Price))
price_sd
# 1. 분산의 동일성 검정
# 영가설 : USA 집단과 non-USA 집단의 분산은 서로 동일하다. (V1 / V2 = 1)
# 대안가설 : USA 집단과 non-USA 집단의 분산은 서로 다르다. (V1 / V2 != 1)
str(Cars93)
var.test(Cars93$Price ~ Cars93$Origin)
var.test(Cars93$Price ~ Cars93$Origin)
## 문제 02. MASS 패키지에 내장된 Cars93 데이터프레임에 대해서 생산국(Origin)이
#           USA vs. non-USA 2개의 group 에 대해서 차 가격(Price)의 평균이
#           차이가 있는지를검정해보시오.
Cars93
library(ggplot2)
head(Cars93)
str(Cars93)
library(MASS)
head(Cars93)
str(Cars93)
price_n <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_n = n())
# MASS와 dplyr 같이 사용하면 충돌이 일어남(dplyr에 select이용 지정)
# 아니면 MASS먼저 로딩하고 그 다음 dplyr 로딩하면 됨
select <- dplyr::select
price_n <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_n = n())
price_n
price_mean <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_mean = mean(Price))
price_mean
price_sd <- Cars93 %>%
select(Price, Origin) %>%
group_by(Origin) %>%
summarise(price_sd = sd(Price))
price_sd
# 1. 분산의 동일성 검정
# 영가설 : USA 집단과 non-USA 집단의 분산은 서로 동일하다. (V1 / V2 = 1)
# 대안가설 : USA 집단과 non-USA 집단의 분산은 서로 다르다. (V1 / V2 != 1)
str(Cars93)
var.test(Cars93$Price ~ Cars93$Origin)
# 2. 모평균의 차이 검정
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하다.(mu1 - mu2 = 0)
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하지 않다.(mu1 - mu2 != 0)
t.test(Cars93$Price ~ Cars93$Origin, mu=0, var.equal= F)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, var.equal=T)
# 2. 모평균의 차이 검정
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하다.(mu1 - mu2 = 0)
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하지 않다.(mu1 - mu2 != 0)
t.test(Cars93$Price ~ Cars93$Origin, mu=0, var.equal= F)
# 2. 모평균의 차이 검정
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하다.(mu1 - mu2 = 0)
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하지 않다.(mu1 - mu2 != 0)
t.test(Cars93$Price ~ Cars93$Origin, mu=0, alternative='two.sided', var.equal= F)
# 2. 모평균의 차이 검정
# 영가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하다. (오토평균-수동평균=0)
# 대안가설 : am:0의 mpg 평균과 am:1의 mpg 평균의 동일하지 않다. (오토평균-수동평균<0)
t.test(mtcars$mpg ~ mtcars$am, mu=0, alternative='two.sided', var.equal=T)
# 2. 모평균의 차이 검정
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하다.(mu1 - mu2 = 0)
# 영가설 : USA 집단과 non-USA 집단의 평균은 서로 동일하지 않다.(mu1 - mu2 != 0)
t.test(Cars93$Price ~ Cars93$Origin, mu=0, alternative='two.sided', var.equal= F)
price_n
price_mean
price_sd
str(mpg)
mpg3 <- mpg %>%
filter(class %in% c('subcompact', 'midsize'))
mpg3_n <- mpg3 %>%
select(class, hwy) %>%
group_by(class) %>%
summarise(mpg3_n = n())
mpg3_n
mpg3_mean <- mpg3 %>%
select(class, hwy) %>%
group_by(class) %>%
summarise(mpg3_mean = mean(hwy))
mpg3_mean
mpg3_sd <- mpg3 %>%
select(class, hwy) %>%
group_by(class) %>%
summarise(mpg3_sd = sd(hwy))
mpg3_sd
## 1. 분산의 동일성 검정
# 영가설 : subcompact 자동차의 분산과 midsize 자도창의 분산은 서로 동일하다. (V1 / V2 = 1)
# 대안가설 : subcompact 자동차의 분산과 midsize 자도창의 분산은 서로 다르다. (V1 / V2 != 1)
var.test(mpg3$hwy ~ mpg3$class)
mpg3 <- mpg %>%
filter(class %in% c('subcompact', 'midsize'))
str(mpg)
mpg3 <- mpg %>%
filter(class %in% c('subcompact', 'midsize'))
## 문제 03. mpg 데이터셋에서 다음을 검정해 보시오.
## 문제 03-1. subcompact 자동차와 midsize 자동차의 고속도로 연비
mpg
str(mpg)
mpg3 <- mpg %>%
filter(class %in% c('subcompact', 'midsize'))
